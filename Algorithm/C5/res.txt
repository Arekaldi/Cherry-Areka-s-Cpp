5a6
> #include <math.h>
36a38,41
> double distBetNodes(double x1, double y1, double x2, double y2) {
>     return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
> }
> 
42,45c47,61
<         n = read();
<         for(int i = 1; i <= n; i++) {
<             a[i].x = read();
<             a[i].y = read();
---
>         int x1, x2, y1, y2, xA, yA;
>         double x1d, x2d, y1d, y2d, xAd, yAd;
>         xA = read(), yA = read();
>         xAd = xA, yAd = yA;
>         x1 = read(), y1 = read();
>         x1d = x1, y1d = y1;
>         x2 = read(), y2 = read();
>         x2d = x2, y2d = y2;
>         if((xA - x1) * (y2 - y1) == (yA - y1) * (x2 - x1)) {
>             if(xA >= std :: min(x1, x2) && xA <= std :: max(x1, x2) && yA >= std :: min(y1, y2) && yA <= std :: max(y1, y2)) {
>                 puts("0.000");
>                 continue;
>             }
>             double dis = std :: min(distBetNodes(xAd, yAd, x1d, y1d), distBetNodes(xAd, yAd, x2d, y2d));
>             printf("%.3lf\n", dis);
47,56c63,99
<         int flag = 1;
<         std :: sort(a + 1, a + n + 1);
<         for(int i = 3; i <= n; ++i) {
<             int x1 = a[i - 2].x, x2 = a[i - 1].x;
<             int y1 = a[i - 2].y, y2 = a[i - 1].y;
<             int x = a[i].x, y = a[i].y;
<             if((x - x1) * (y2 - y1) != (y - y1) * (x2 - x1)) {
<                 puts("how?");
<                 flag = 0;
<                 break;
---
>         else if(x2 == x1 || y2 == y1) {
>             if(x2 == x1) {
>                 if(yA >= std :: min(y1, y2) && yA <= std :: max(y1, y2)) {
>                     double dis = std ::abs(xAd - x1d);
>                     printf("%.3lf\n", dis);
>                 }
>                 else {
>                     double dis1 = distBetNodes(xAd, yAd, x1d, y1d), dis2 = distBetNodes(xAd, yAd, x2d, y2d);
>                     double dis = std :: min(dis1, dis2);
>                     printf("%.3lf\n", dis);
>                 }
>             }
>             if(y2 == y1) {
>                 if(xA >= std :: min(x1, x2) && xA <= std :: max(x1, x2)) {
>                     double dis = std ::abs(yAd - y1d);
>                     printf("%.3lf\n", dis);
>                 }
>                 else {
>                     double dis1 = distBetNodes(xAd, yAd, x1d, y1d), dis2 = distBetNodes(xAd, yAd, x2d, y2d);
>                     double dis = std :: min(dis1, dis2);
>                     printf("%.3lf\n", dis);
>                 }
>             }
>         }
>         else {
>             double a = (y2d - y1d) / (x2d - x1d), b = y1d - a * x1d;
>             double x0 = (xAd - a * b + a * yAd) / (a * a + 1), y0 = a * x0 + b;
>             if(x0 >= std :: min(x1, x2) && x0 <= std :: max(x1, x2) && y0 >= std :: min(y1, y2) && y0 <= std :: max(y1, y2)) {
>                 double dis = (a * xAd - yAd + b) / sqrt(a * a + 1);
>                 if(dis < 0)
>                     dis = -dis;
>                 printf("%.3lf\n", dis);
>             }
>             else {
>                 double dis1 = distBetNodes(xAd, yAd, x1d, y1d), dis2 = distBetNodes(xAd, yAd, x2d, y2d);
>                 double dis = std :: min(dis1, dis2);
>                 printf("%.3lf\n", dis);
59,60d101
<         if(flag)
<             puts("boo how! boo how!");
